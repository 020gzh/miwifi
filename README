
        Xiaomi Router Core Support Package


1. Overview
============

Support Xiaomi R1D router (with 1T sata disk).

The Kernel version is 2.6.36
WLAN driver are binary object file from Broadcom located in 'drivers/net/wl'


2. Change History
==================

  - 2014/06: First version with kernel 2.6.36, support Xiaomi router R1D


3. Features
===========

3.1 Supported Features
-----------------------

  o General Platform
    + ARM Cortex A9 Dual-Core
    + 32 KB I-cache and 32 KB D-cache per core
    + 256 KB L2 Cache (shared)
    + 128-entry TLB
    + SMP

  o Bus
    + DDR3: Broadcom BCM4709 On-Chip DDR3 interface
    + PCI-E: Broadcom BCM4709 On-Chip PCI-E Controller 
    + USB: Broadcom BCM4709 On-Chip USB Controller
    + SPI: Broadcom BCM4709 On-Chip SPI Controller
    + SATA: ASMedia ASM1062 PCI-E SATA Controller

  o Network
    + Ethernet: Broadcom On-Chip 010/100/1000M  Ethernet Controller 
    + WLAN:
        + 2.4GHz: BCM43217, 802.11b/g/n Transceiver, PCIe 2.0 interface,
                   Radio + Baseband + MAC, 300Mbps
        + 5.0GHz: BCM4352, 2-Stream 802.11ac Transceiver (Support 802.11a/b/g/n)
                   PCIe 2.0 interface, Radio + Baseband + MAC, 867Mbps

  o Storage
    + NOR Flash: MXIC 25L12835F (16MB)
    + SATA Disk: Samsung 1T Sata disk 

  o MISC
    + Temp Sensor: TMP75
    + LED: Three LEDs (red, yellow, blue), GPIO interface


3.2 Unsupported Features
------------------------

Will be support in the furture:

  o MISC
    + PWM


4. Usage
==========

4.1 Build
----------

The following is validated in Ubuntu 12.04:

  $ sudo apt-get install lzma
  $ git clone git://github.com/comcat/miwifi.git
  $ export PATH=`pwd`/miwifi/toolchain/hndtools-arm-linux-2.6.36-uclibc-4.5.3/bin:$PATH
  $ cd miwifi/kernel/linux-2.6.36
  $ make ARCH=arm CROSS_COMPILE=arm-brcm-linux-uclibcgnueabi- vmlinuz -j4

The output image is arch/arm/boot/vmlinuz and the build system automatly
install the vmlinuz into /tftpboot/ , you can load it from CFE via tftpboot


4.2 Enviroment
---------------

4.2.1 Network
--------------

Make sure the LAN port (black one) of the Router and your PC ethernet port are
connected to the same Ethernet HUB.

The default ip addr of the CFE is 192.168.1.1 and the default tftp server ip is
192.168.1.2. So we need to setup a new ip for your PC eth0 port something like:

  $ sudo ifconfig eth0:1 192.168.1.2


4.2.2 TFTP Server
------------------

We load the kernel through tftpboot. So we need to install a tftp server in your
desktop PC:

  $ sudo apt-get install tftpd tftp

Configure the tftp server via touching a file /etc/xinetd.d/tftp with following
contents:

$ cat /etc/xinetd.d/tftp
service tftp
{
    socket_type = dgram
    protocol = udp
    wait = yes
    user = root
    server = /usr/sbin/in.tftpd
    server_args = -s /tftpboot
    disable = no
    per_source = 11
    cps = 100 2
    flags = IPv4
}

$ ls /etc/xinetd.d/
chargen  daytime  discard  echo  tftp  time

$ sudo mkdir /tftpboot
$ sudo chmod 777 /tftpboot

$ sudo /etc/init.d/xinetd restart


Now you can place your vmlinuz into the /tftpboot:

$ cp /path/to/kernel/arch/arm/boot/vmlinuz /tftpboot


4.2.3 CFE tftp load
--------------------

You need to set the nvram parameter 'flag_tftp_bootup' to 'on' to make the
CFE to load the vmlinuz through tftp from tftp server:

root@XiaoQiang:/# nvram get flag_tftp_bootup
off
root@XiaoQiang:/# nvram set flag_tftp_bootup=on
root@XiaoQiang:/# nvram commit
root@XiaoQiang:/# nvram get flag_tftp_bootup
on
root@XiaoQiang:/# reboot
 
...........
CFE version v1.0.4
BSP: 6.37.14.34 (r415984) based on BBP 1.0.37 for BCM947XX (32bit,SP,)
Build Date: Wed Apr 30 18:03:21 CST 2014 (szy@shenzhiyong-ct)
 
...........
 
Device eth0:  hwaddr 8C-BE-BE-20-B7-48, ipaddr 192.168.1.1, mask 255.255.255.0
        gateway not set, nameserver not set
********** flag_tftp_bootup=on **********
tftp network: ifconfig eth0 -addr=192.168.1.1 -mask=255.255.255.0 -gw=192.168.1.1
Device eth0:  hwaddr 8C-BE-BE-20-B7-48, ipaddr 192.168.1.1, mask 255.255.255.0
        gateway 192.168.1.1, nameserver not set
kernel: boot -raw -z -addr=0x8000 -max=0x800000 192.168.1.2:vmlinuz
Loader:raw Filesys:tftp Dev:eth0 File:192.168.1.2:vmlinuz Options:(null)
Loading: ........ 5704544 bytes read
Entry at 0x00008000
Closing network.
Starting program at 0x00008000
......
......


5. Debian Rootfs
=================

Install an ARM basic debian on your x86 machine, The following is validated in
Ubuntu 12.04:

  $ sudo apt-get install qemu-user-static

 And create the core rootfs with the included debootstrap wrapper script:

  $ sudo qemu-debootstrap --arch armel stable rootfs
  I: Running command: debootstrap --arch armel --foreign stable rootfs
  I: Retrieving Release
  I: Retrieving Packages
  I: Validating Packages
  ...
  ...
  I: Base system installed successfully.

The basic debian successfully created in rootfs directory. Now you can chroot
into the rootfs:

  $ sudo chroot ./rootfs

  # ldd bin/bash 
  libtinfo.so.5 => /lib/arm-linux-gnueabi/libtinfo.so.5 (0xf67af000)
  libdl.so.2 => /lib/arm-linux-gnueabi/libdl.so.2 (0xf67a4000)
  libgcc_s.so.1 => /lib/arm-linux-gnueabi/libgcc_s.so.1 (0xf677a000)
  libc.so.6 => /lib/arm-linux-gnueabi/libc.so.6 (0xf6642000)
  /lib/ld-linux.so.3 (0xf6fda000)

  # cd bin
  # ls -l sh
  lrwxrwxrwx 1 root root 4 Mar  1  2012 sh -> dash
  # ln -sf bash sh
  # ls -l sh
  lrwxrwxrwx 1 root root 4 Jul  2 11:59 sh -> bash

  # cat etc/apt/sources.list
  deb http://mirrors.ustc.edu.cn/debian   wheezy main contrib non-free

  # apt-get update
  Get:1 http://mirrors.ustc.edu.cn wheezy Release.gpg [1672 B]
  ......
  ......

  # cat etc/hostname 
  R1D
  # exit

Now we can package the rootfs into a tar.gz file:

  $ ls rootfs
  bin  boot  dev  etc  home  lib  media  mnt  opt  proc  root  run  sbin
  selinux  srv  sys  tmp  usr  var
  $ sudo tar czpf debian-rootfs.tgz rootfs/

scp the debian-rootfs.tgz to xiaomi router, extract it into /dev/sda4 and
enjoy it!



